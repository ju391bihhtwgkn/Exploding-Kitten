[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Juliano\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Juliano\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 18.0.1)
[debug]       Load.loadUnit: plugins took 53.5716ms
[debug]       Load.loadUnit: defsScala took 0.1863ms
[debug] [Loading] Scanning directory C:\Users\Juliano\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Juliano\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.634999 ms
[debug]           Load.resolveProject(global-plugins) took 29.3276ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Juliano\.sbt\1.0\plugins, plugins: List(<none>))) took 50.9926ms
[debug] [Loading] Done in C:\Users\Juliano\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 63.605ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1293ms
[debug]     Load.loadUnit(file:/C:/Users/Juliano/.sbt/1.0/plugins/, ...) took 123.419001ms
[debug]   Load.apply: load took 212.104501ms
[debug]   Load.apply: resolveProjects took 3.486ms
[debug]   Load.apply: finalTransforms took 42.4943ms
[debug]   Load.apply: config.delegates took 4.5753ms
[debug]   Load.apply: Def.make(settings)... took 284.0584ms
[debug]   Load.apply: structureIndex took 90.566ms
[debug]   Load.apply: mkStreams took 1.149901ms
[info] loading global plugins from C:\Users\Juliano\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1678.227201ms
[debug]           Load.loadUnit: plugins took 15.7465ms
[debug]           Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\Juliano\IdeaProjects\Exploding-Kitten\project
[debug]             Load.loadUnit: mkEval took 3.985599ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Juliano\IdeaProjects\Exploding-Kitten\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7343 ms
[info] loading settings for project exploding-kitten-build from idea1.sbt ...
[debug]               Load.resolveProject(exploding-kitten-build) took 10.5831ms
[debug]             Load.loadTransitive: finalizeProject(Project(id exploding-kitten-build, base: C:\Users\Juliano\IdeaProjects\Exploding-Kitten\project, plugins: List(<none>))) took 12.7468ms
[debug] [Loading] Done in C:\Users\Juliano\IdeaProjects\Exploding-Kitten\project, returning: (exploding-kitten-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1657.2441ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.541601ms
[debug]         Load.loadUnit(file:/C:/Users/Juliano/IdeaProjects/Exploding-Kitten/project/, ...) took 1678.218101ms
[debug]       Load.apply: load took 1679.457099ms
[debug]       Load.apply: resolveProjects took 0.0869ms
[debug]       Load.apply: finalTransforms took 10.035299ms
[debug]       Load.apply: config.delegates took 0.351099ms
[debug]       Load.apply: Def.make(settings)... took 54.342701ms
[debug]       Load.apply: structureIndex took 26.068599ms
[debug]       Load.apply: mkStreams took 0.0016ms
[info] loading project definition from C:\Users\Juliano\IdeaProjects\Exploding-Kitten\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2751.135699ms
[debug]     Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory C:\Users\Juliano\IdeaProjects\Exploding-Kitten
[debug]       Load.loadUnit: mkEval took 0.163199ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4721 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 26.3964ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Juliano\IdeaProjects\Exploding-Kitten, plugins: List(<none>))) took 28.9437ms
[debug] [Loading] Done in C:\Users\Juliano\IdeaProjects\Exploding-Kitten, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1063.3492ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.2652ms
[debug]   Load.loadUnit(file:/C:/Users/Juliano/IdeaProjects/Exploding-Kitten/, ...) took 3829.357ms
[debug] Load.apply: load took 3830.427701ms
[debug] Load.apply: resolveProjects took 0.090001ms
[debug] Load.apply: finalTransforms took 15.109701ms
[debug] Load.apply: config.delegates took 0.203201ms
[debug] Load.apply: Def.make(settings)... took 41.294199ms
[debug] Load.apply: structureIndex took 17.241401ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to Exloding Kitten (in build file:/C:/Users/Juliano/IdeaProjects/Exploding-Kitten/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59420 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59420, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Exloding Kitten (in build file:/C:/Users/Juliano/IdeaProjects/Exploding-Kitten/)
[debug] > Exec(idea-shell, None, None)
